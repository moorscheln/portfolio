    def _validate_fields_against_schema(self, type_name: str, fields: List[str]):
        """Validate requested node fields against the live schema."""
        type_info = self.introspect_type(type_name)
        valid_fields = {f["name"] for f in (type_info.get("fields") or [])}
        invalid = set(fields) - valid_fields
        if invalid:
            logger.error("Invalid fields for %s: %s", type_name, invalid)
            raise ValueError(f"Invalid fields for {type_name}: {invalid}")
        logger.debug("Validated fields %s against %s successfully", fields, type_name)

    def get_incidents(
        self,
        filter: Optional[IncidentFilter] = None,
        node_fields: List[str] = None,
        first: int = 100,
        after: Optional[str] = None,
    ) -> Dict[str, Any]:
        """
        Fetch incidents with dynamic node fields.
        node_fields: list of GraphQL field names (e.g. ["id","status","createdAt"])
        """
        if not node_fields or not isinstance(node_fields, list):
            raise ValueError("node_fields must be a non-empty list of field names")

        # Validate node fields against Incident type via introspection
        self._validate_fields_against_schema("Incident", node_fields)

        # Build the query string dynamically
        fields_block = "\n          ".join(node_fields)
        query = gql(f"""
        query GetIncidents($filter: IncidentFilter, $first: Int, $after: String) {{
          incidents(filter: $filter, first: $first, after: $after) {{
            nodes {{
              {fields_block}
            }}
            pageInfo {{
              hasNextPage
              endCursor
            }}
          }}
        }}
        """)

        filter = filter or IncidentFilter()
        return self._search(
            root="incidents",
            filter_obj=filter,
            query=query,
            connection_model=IncidentConnection,
            first=first,
            after=after,
        )

    def get_playbook_runs(
        self,
        filter: Optional[PlaybookRunFilter] = None,
        node_fields: List[str] = None,
        first: int = 100,
        after: Optional[str] = None,
    ) -> Dict[str, Any]:
        """
        Fetch playbookRuns with dynamic node fields.
        node_fields: list of GraphQL field names (e.g. ["id","status","name"])
        """
        if not node_fields or not isinstance(node_fields, list):
            raise ValueError("node_fields must be a non-empty list of field names")

        # Validate node fields against PlaybookRun type via introspection
        self._validate_fields_against_schema("PlaybookRun", node_fields)

        fields_block = "\n          ".join(node_fields)
        query = gql(f"""
        query GetPlaybookRuns($filter: PlaybookRunFilter, $first: Int, $after: String) {{
          playbookRuns(filter: $filter, first: $first, after: $after) {{
            nodes {{
              {fields_block}
            }}
            pageInfo {{
              hasNextPage
              endCursor
            }}
          }}
        }}
        """)

        filter = filter or PlaybookRunFilter()
        return self._search(
            root="playbookRuns",
            filter_obj=filter,
            query=query,
            connection_model=PlaybookRunConnection,
            first=first,
            after=after,
        )
